/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var _wp = wp,
  blocks = _wp.blocks,
  data = _wp.data,
  element = _wp.element,
  components = _wp.components,
  blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
  select = data.select;
var Fragment = element.Fragment;
var PanelBody = components.PanelBody,
  BaseControl = components.BaseControl,
  Icon = components.Icon,
  RangeControl = components.RangeControl,
  IconButton = components.IconButton,
  Toolbar = components.Toolbar,
  SelectControl = components.SelectControl;
var InnerBlocks = blockEditor.InnerBlocks,
  RichText = blockEditor.RichText,
  InspectorControls = blockEditor.InspectorControls,
  PanelColorSettings = blockEditor.PanelColorSettings,
  MediaUpload = blockEditor.MediaUpload,
  BlockControls = blockEditor.BlockControls;
var __ = Drupal.t;
var settings = {
  title: __('Gutenberg Example Block'),
  description: __('Gutenberg Example Block'),
  icon: 'welcome-learn-more',
  attributes: {
    title: {
      type: 'string'
    },
    subtitle: {
      type: 'string'
    },
    text: {
      type: 'string'
    }
  },
  edit: function edit(_ref) {
    var className = _ref.className,
      attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      isSelected = _ref.isSelected;
    var title = attributes.title,
      subtitle = attributes.subtitle,
      text = attributes.text;
    return React.createElement(Fragment, null, React.createElement("div", {
      className: className
    }, React.createElement("div", {
      className: "column"
    }, React.createElement(RichText, {
      identifier: "title",
      tagName: "h2",
      value: title,
      placeholder: __('Title'),
      onChange: function onChange(nextTitle) {
        setAttributes({
          title: nextTitle
        });
      },
      onSplit: function onSplit() {
        return null;
      },
      unstableOnSplit: function unstableOnSplit() {
        return null;
      }
    }), React.createElement(RichText, {
      identifier: "subtitle",
      tagName: "div",
      value: subtitle,
      placeholder: __('Subtitle'),
      onChange: function onChange(nextSubtitle) {
        setAttributes({
          subtitle: nextSubtitle
        });
      },
      onSplit: function onSplit() {
        return null;
      },
      unstableOnSplit: function unstableOnSplit() {
        return null;
      }
    }), React.createElement(RichText, {
      identifier: "text",
      tagName: "p",
      value: text,
      placeholder: __('Text'),
      onChange: function onChange(nextText) {
        setAttributes({
          text: nextText
        });
      }
    })), React.createElement("div", {
      className: "column"
    }, React.createElement("div", {
      className: "icon"
    }, React.createElement(Icon, {
      icon: "welcome-learn-more"
    })), isSelected && React.createElement("div", {
      className: "info"
    }, React.createElement("p", null, "This is Gutenberg's example block."), React.createElement("p", null, "To test it just fill the \"fields\" on the left and save.")))), React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('Block Settings')
    }, React.createElement("div", null, title))));
  },
  save: function save(_ref2) {
    var className = _ref2.className,
      attributes = _ref2.attributes;
    var title = attributes.title,
      subtitle = attributes.subtitle,
      text = attributes.text;
    return React.createElement("div", {
      className: className
    }, React.createElement("div", {
      className: "column"
    }, title && React.createElement("h2", null, title), subtitle && React.createElement("div", null, subtitle), text && React.createElement("p", null, text)), React.createElement("div", {
      className: "column"
    }, React.createElement("div", {
      className: "icon"
    }, React.createElement(Icon, {
      icon: "welcome-learn-more"
    }))));
  }
};
var dynamicBlockSettings = {
  title: __('Gutenberg Example Dynamic Block'),
  description: __('Gutenberg example dynamic block that can be rendered server-side.'),
  icon: 'welcome-learn-more',
  attributes: {
    title: {
      type: 'string'
    }
  },
  edit: function edit(_ref3) {
    var className = _ref3.className,
      attributes = _ref3.attributes,
      setAttributes = _ref3.setAttributes,
      isSelected = _ref3.isSelected;
    var title = attributes.title;
    return React.createElement("div", {
      className: className
    }, React.createElement("div", null, "\u2014 Hello from the Gutenberg JS editor."), React.createElement("div", {
      className: "dynamic-block-title"
    }, React.createElement(RichText, {
      identifier: "title",
      tagName: "h2",
      value: title,
      placeholder: __('Title'),
      onChange: function onChange(title) {
        setAttributes({
          title: title
        });
      },
      onSplit: function onSplit() {
        return null;
      },
      unstableOnSplit: function unstableOnSplit() {
        return null;
      }
    })), React.createElement("div", {
      className: "dynamic-block-content"
    }, React.createElement(InnerBlocks, null)));
  },
  save: function save(_ref4) {
    var className = _ref4.className,
      attributes = _ref4.attributes;
    var title = attributes.title;
    return React.createElement(InnerBlocks.Content, null);
  }
};
var category = {
  slug: 'example',
  title: __('Examples')
};
var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));
registerBlockType("".concat(category.slug, "/example-block"), _objectSpread({
  category: category.slug
}, settings));
registerBlockType("".concat(category.slug, "/dynamic-block"), _objectSpread({
  category: category.slug
}, dynamicBlockSettings));