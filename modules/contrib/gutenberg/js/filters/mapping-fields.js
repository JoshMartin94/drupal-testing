/**
 * Generated by a build script. Do not modify.
 * Check orginal .jsx file.
 */
/* eslint-disable */

(async (wp2, Drupal2) => {
  const { blockEditor, components, compose, hooks } = wp2;
  const { addFilter } = hooks;
  const { createHigherOrderComponent } = compose;
  const { Card, CardBody, CardHeader, PanelBody } = components;
  const { InspectorControls } = blockEditor;
  function hasMappingFields(attributes) {
    return attributes && attributes.mappingFields && Array.isArray(attributes.mappingFields);
  }
  const withInspectorControl = createHigherOrderComponent(
    (BlockEdit) => (props) => {
      const { isSelected, attributes, setAttributes } = props;
      const hasMapping = hasMappingFields(attributes);
      const { mappingFields } = attributes;
      const {
        nonTranslatableMappingFields: ntFields
      } = drupalSettings.gutenberg;
      if (hasMapping) {
        mappingFields.forEach((field) => {
          if (ntFields[field.field]) {
            const property = field.property || "value";
            const value = {
              [`${field.attribute}`]: ntFields[field.field][0][property]
            };
            setAttributes(value);
          }
        });
      }
      if (hasMapping && isSelected) {
        return [
          /* @__PURE__ */ React.createElement(BlockEdit, { ...props }),
          /* @__PURE__ */ React.createElement(InspectorControls, null, !attributes.lockViewMode && /* @__PURE__ */ React.createElement(PanelBody, { title: Drupal2.t("Field mapping"), initialOpen: true }, attributes.mappingFields.map((field) => {
            let content;
            const property = field.property || "value";
            if (field.attribute) {
              content = Drupal2.t(
                "The block attribute <strong>@attribute</strong> is mapped to the <strong>@field[@property]</strong> field.",
                {
                  "@attribute": field.attribute,
                  "@field": field.field,
                  "@property": property
                }
              );
            } else {
              content = Drupal2.t(
                "The block content is mapped to the <strong>@field[@property]</strong> field.",
                {
                  "@field": field.field,
                  "@property": property
                }
              );
            }
            return /* @__PURE__ */ React.createElement(Card, null, field.label && /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement("strong", null, field.label)), /* @__PURE__ */ React.createElement(CardBody, null, /* @__PURE__ */ React.createElement(
              "div",
              {
                className: "mapping-fields-summary",
                dangerouslySetInnerHTML: { __html: content }
              }
            )));
          })))
        ];
      }
      return /* @__PURE__ */ React.createElement(BlockEdit, { ...props });
    },
    "withInspectorControl"
  );
  addFilter(
    "blocks.registerBlockType",
    "drupalgutenberg/mapping-fields-attributes",
    (settings) => {
      settings.attributes = Object.assign(settings.attributes, {
        mappingFields: {
          type: "array"
        }
      });
      return settings;
    }
  );
  addFilter(
    "editor.BlockEdit",
    "core/editor/mapping-fields-attributes/with-inspector-control",
    withInspectorControl
  );
})(wp, Drupal);
